  window.addEventListener("load", read_firebase);
  function read_firebase() {
    firebase.auth().onAuthStateChanged(function (user) {
      if (user) {
        loadingScreen.style.display = "flex";
        loadingText.innerText = "Dein Profil wird geladen...";
        var functions = firebase.app().functions("europe-west1");

        // call Firebase function getUserRequest

        var getUserRequests = functions.httpsCallable("getUserRequests");

        getUserRequests({ environment: environmentGlobal })
          .then((result) => {
            if (comments) {
              console.log("getUserRequest", result.data);
            }

            var data = result.data;

            // sort data into newest request first

            var sortedData = data.sort(function (a, b) {
              return b.date_time._seconds - a.date_time._seconds;
            });

            // create new request and reorder object to match field names on webflow

            var i = 0;
            var j = 0;

            sortedData.forEach((request) => {
              var newObject = {
                date_time: new Date(
                  request.date_time._seconds * 1000
                ).toLocaleDateString("en-GB"),
                type: request.type,
                client_name: request.client_name,
                date_intro_call: request.date_intro_call,
                date_session: request.date_session,
                follow_up_session: request.follow_up_session,
                reason: request.reason,
                // status: request.status,
                comment_therapist: request.comment_therapist,
                session_1_billed: request.session_1_billed,
                session_2_billed: request.session_2_billed,
              };

              let userRequest = document.createElement("div");
              userRequest.setAttribute("id", request.id);
              userRequest.setAttribute("class", "request-container");
              requestList.appendChild(userRequest);

              // create each field/ component for every new request on webflow.

              for (var item in newObject) {
                if (item !== "id") {
                  let userItem = document.createElement("div");
                  userItem.setAttribute("id", item.id);
                  if (
                    [
                      "date_time",
                      "date_intro_call",
                      "date_session",
                      "session_1_billed",
                      "session_2_billed",
                      "follow_up_session",
                    ].includes(item)
                  ) {
                    userItem.setAttribute("class", "small_div");
                  } else {
                    userItem.setAttribute("class", "large_div");
                  }
                  userRequest.appendChild(userItem);

                  switch (item) {
                    case "type":
                    case "date_time":
                    case "client_name": {
                      let inputField = document.createElement("input");
                      if (item === "date_time") {
                        inputField.setAttribute("id", "date");
                      } else if (item === "type") {
                        inputField.setAttribute("id", "type");
                      } else {
                        inputField.setAttribute("id", "name");
                      }
                      inputField.setAttribute("class", "w-input");
                      inputField.setAttribute("disabled", true);
                      inputField.value = newObject[item];
                      userItem.appendChild(inputField);
                      break;
                    }
                    case "follow_up_session": {
                      const optionArray = ["", "Ya", "Nein"];
                      let followUpSessionSelect =
                        document.createElement("select");
                      followUpSessionSelect.setAttribute(
                        "id",
                        "followUpSession"
                      );
                      followUpSessionSelect.setAttribute("class", "w-select");
                      userItem.appendChild(followUpSessionSelect);

                      optionArray.forEach((optionItem) => {
                        let opt = document.createElement("option");
                        if (optionItem === newObject[item]) {
                          opt.selected = true;
                        }
                        opt.value = optionItem;
                        opt.innerText += optionItem;
                        followUpSessionSelect.appendChild(opt);
                      });
                      followUpSession.select.style.backgroundColor = "white";
                      break;
                    }
                    case "reason": {
                      const optionArray = [
                        "First Choice",
                        "Second Choice",
                        "Third Choice",
                      ];
                      let reasonSelect = document.createElement("select");
                      reasonSelect.setAttribute("id", "reason");
                      reasonSelect.setAttribute("class", "w-select");
                      userItem.appendChild(reasonSelect);
                      optionArray.forEach((optionItem) => {
                        let opt = document.createElement("option");
                        if (optionItem === newObject[item]) {
                          opt.selected = true;
                        }
                        opt.value = optionItem;
                        opt.innerText += optionItem;
                        reasonSelect.appendChild(opt);
                      });
                      reason.select.style.backgroundColor = "white";
                      break;
                    }

                    case "comment_therapist": {
                      let comment = document.createElement("textarea");
                      comment.setAttribute("id", "comment");
                      comment.value = newObject[item];
                      userItem.appendChild(comment);
                      break;
                    }

                    case "date_intro_call":
                    case "date_session": {
                      let dateInput = document.createElement("input");
                      if (item === "date_intro_call") {
                        dateInput.setAttribute("id", `dateIntroCall${i}`);
                        dateInput.setAttribute("name", `dateIntroCall`);
                        dateInput.setAttribute("class", "w-input");
                        dateInput.value = newObject[item];
                        userItem.appendChild(dateInput);
                        i++;
                      } else {
                        dateInput.setAttribute("id", `dateSession${j}`);
                        dateInput.setAttribute("name", `dateSession`);
                        dateInput.setAttribute("class", `w-input`);
                        dateInput.value = newObject[item];
                        userItem.appendChild(dateInput);
                        j++;
                      }
                      break;
                    }
                    case "session_1_billed":
                    case "session_2_billed": {
                      let dateInput = document.createElement("input");
                      dateInput.setAttribute("disabled", true);
                      if (item === "session_1_billed") {
                        dateInput.setAttribute("id", `session1Billed`);
                        dateInput.setAttribute("class", "w-input");
                        dateInput.value = newObject[item];
                        userItem.appendChild(dateInput);
                      } else {
                        dateInput.setAttribute("id", `session2Billed`);
                        dateInput.setAttribute("class", `w-input`);
                        dateInput.value = newObject[item];
                        userItem.appendChild(dateInput);
                      }
                      break;
                    }
                  }
                }
              }
              $(".w-input").each(function () {
                if (
                  ["date", "session1Billed", "session2Billed"].includes(
                    $(this).attr("id")
                  )
                ) {
                } else {
                  $(this).datepicker({
                    monthNames: [
                      "Januar",
                      "Februar",
                      "MÃ¤rz",
                      "April",
                      "Mai",
                      "Juni",
                      "Juli",
                      "August",
                      "September",
                      "Oktober",
                      "November",
                      "Dezember",
                    ],
                    dateFormat: "dd/mm/yy",
                  });
                }
              });
            });
            setTimeout(function () {
              loadingScreen.style.display = "none";
            }, 1000);
          })

          .catch((error) => {
            // Getting the Error details.
            loadingText.innerText =
              "Dein Profil konnte nicht geladen werden - aktualisiere die Webseite.";
            loadingImage.src =
              "https://uploads-ssl.webflow.com/60cc97227f4df723825f11e4/60e80aa059b256e42569b7be_outline_error_outline_white_24dp.png";
            if (comments) {
              console.log(error.code);
            }
            if (comments) {
              console.log(error.message);
            }
            if (comments) {
              console.log(error.details);
            }
          });
      }
    });
  }